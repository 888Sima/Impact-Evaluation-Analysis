# -*- coding: utf-8 -*-
"""impact_evaluation_analysis

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_dWuOp07567eMbW2Qa712IbsRoHZ9YVy
"""

import pandas as pd
import zipfile
import io
import statsmodels.api as sm
from statsmodels.formula.api import ols
from statsmodels.stats.api import DescrStatsW
import statsmodels.formula.api as smf

# === 1. Upload the ZIP file manually in Colab ===
from google.colab import files
uploaded = files.upload()

# === 2. Unzip and load CSV ===
zip_file = list(uploaded.keys())[0]  # Get the uploaded zip filename

with zipfile.ZipFile(zip_file, 'r') as z:
    with z.open('data_state_1.csv') as f:
        data_state_1 = pd.read_csv(f)

    with z.open('data_state_2.csv') as f:
        data_state_2 = pd.read_csv(f)

# === 3. Clean column names (remove spaces, make lowercase for convenience) ===
data_state_1.columns = data_state_1.columns.str.strip().str.upper()
data_state_2.columns = data_state_2.columns.str.strip().str.upper()

# === Section 1: State 1 Data Analysis ===

# 1. Proportion of female students in State 1
prop_female = data_state_1['FEMALE'].mean()
print("Proportion of female students in State 1:", round(prop_female, 3))

# 2. Average age among male students in treated schools in State 1
treated_males = data_state_1[(data_state_1['TREATED'] == 1) & (data_state_1['FEMALE'] == 0)]
avg_age_male_treated = treated_males['AGE'].mean()
print("Average age among treated male students:", round(avg_age_male_treated, 3))

# 3. School with most 12-year-old students
students_12 = data_state_1[data_state_1['AGE'] == 12]
count_12_by_school = students_12.groupby('ID_SCHOOL').size()
max_12_students = count_12_by_school.max()
print("Max number of 12-year-old students in one school:", max_12_students)

# === Section 2: Balance check â€” AGE ~ TREATED in State 1 (with clustered SEs) ===
model_age = smf.ols('AGE ~ TREATED', data=data_state_1).fit(cov_type='cluster', cov_kwds={'groups': data_state_1['ID_SCHOOL']})
print("\nBalance regression (AGE ~ TREATED):")
print("Coefficient:", round(model_age.params['TREATED'], 3))
print("Standard error:", round(model_age.bse['TREATED'], 3))
print("P-value:", round(model_age.pvalues['TREATED'], 3))

# === Section 3: Impact Evaluation on State 2 (LANGUAGE_SCORE_STD ~ TREATED) ===
model_state2 = smf.ols('LANGUAGE_SCORE_STD ~ TREATED', data=data_state_2).fit(cov_type='cluster', cov_kwds={'groups': data_state_2['ID_SCHOOL']})
print("\nImpact on language score (State 2):")
print("Coefficient:", round(model_state2.params['TREATED'], 3))
print("Standard error:", round(model_state2.bse['TREATED'], 3))
print("P-value:", round(model_state2.pvalues['TREATED'], 3))

# Interpretation
if model_state2.pvalues['TREATED'] < 0.05:
    print("Interpretation: The treatment had a statistically significant impact on language scores in State 2.")
else:
    print("Interpretation: The treatment did NOT have a statistically significant impact on language scores in State 2.")

# === Section 4: Impact Evaluation on State 1 ===
model_state1 = smf.ols('LANGUAGE_SCORE_STD ~ TREATED', data=data_state_1).fit(cov_type='cluster', cov_kwds={'groups': data_state_1['ID_SCHOOL']})
print("\nImpact on language score (State 1):")
print("Coefficient:", round(model_state1.params['TREATED'], 3))
print("Standard error:", round(model_state1.bse['TREATED'], 3))
print("P-value:", round(model_state1.pvalues['TREATED'], 3))

# Interpretation
if model_state1.pvalues['TREATED'] < 0.05:
    print("Interpretation: The treatment had a statistically significant impact on language scores in State 1.")
else:
    print("Interpretation: The treatment did NOT have a statistically significant impact on language scores in State 1.")